<?php
/**
 * 任务数据处理
 * Created by PhpStorm.
 * User: wdy
 * Date: 2018/3/14
 * Time: 08:50
 */

namespace app\script\model;

use think\Db;
use think\Exception;
use think\exception\DbException;
use think\Log;

class TaskGenerator
{
    protected $yesterday;
    protected $today;
    protected $now;
    protected $message;

    public function __construct()
    {
        $this->yesterday = date("Y-m-d 00:00:00", strtotime("-1 day"));
        $this->today = date("Y-m-d 00:00:00");
        $this->now = date("Y-m-d H:i:s");
    }


    /**
     * 1.任务生成:
     * 将昨日已发布、已取消的任务导入今日任务中。
     */
    public function gen()
    {
        // 生成昨天的任务
        try {
            // 昨天已发布的任务
            $tasks_published = Db::table('task')
                ->where('task_time', 'between', [$this->yesterday, $this->today])
                ->where('status', '=', '2')->select();
            // 昨天已取消的任务
            $tasks_canceled = Db::table('task')
                ->where('task_time', 'between', [$this->yesterday, $this->today])
                ->where('status', '=', '0')->select();
            if (!empty($tasks_published)) {
                foreach ($tasks_published as $k => $v) {
                    $tasks_published[$k]['status'] = 1;
                    $tasks_published[$k]['task_time'] = $this->now;
                    unset($tasks_published[$k]['t_id']);
                    $kw_ids = [];
                    if (!empty($v['kw_id'])) {
                        $kw_ids = explode(',', $v['kw_id']);
                    }
                    $tasks_published[$k]['keyword_num'] = count($kw_ids);
                }
            }
            if (!empty($tasks_canceled)) {
                foreach ($tasks_canceled as $k => $v) {
                    $tasks_canceled[$k]['task_time'] = $this->now;
                    unset($tasks_canceled[$k]['t_id']);
                    $kw_ids = [];
                    if (!empty($v['kw_id'])) {
                        $kw_ids = explode(',', $v['kw_id']);
                    }
                    $tasks_canceled[$k]['keyword_num'] = count($kw_ids);
                }
            }
            $task_gen = array_merge($tasks_published, $tasks_canceled);
            // 处理后插入task
            if (!empty($task_gen)) {
                foreach ($task_gen as $k => $v) {
                    Db::table('task')->insert($v);
                }
            }
        } catch (DbException $e) {
        }
        return true;
    }

    /**
     * 2.任务分发
     */
    public function deliver($t_id = 0)
    {
            if ($t_id == 0) {
                $tasks_unpublished = Db::table('task')
                    ->where('task_time', 'between', [$this->today, $this->now])
                    ->where('status', '=', '1')
                    ->select();
            } else {
                // 指定任务
                $tasks_unpublished = Db::table('task')->where('t_id', '=', $t_id)->select();
            }
            if (!empty($tasks_unpublished)) {
                $arr_insert=$kw_id_arr_all =$t_id_arr=[];
                foreach ($tasks_unpublished as $k => $v) {
                        $t_id_arr[] = $v['t_id'];
                        $kw_id_arr = $this->deliverRule($v,$kw_id_arr_all);
                        $kw_id_arr_all = array_merge($kw_id_arr_all,$kw_id_arr);
                        foreach ($kw_id_arr as $kw_id) {
                            $arr_insert[] = [
                                'create_time' => $this->today,
                                'user_id' => $v['user_id'],
                                'kw_id' => $kw_id,
                                'status' => 0,
                                't_id' => $v['t_id'],
                                'article_num' => $v['article_num'],
                                'complete_num' => 0,
                            ];
                        }
                }
                try{

                    Db::startTrans();
                    // 处理后插入task_detail
                    Db::table('task_detail')->insertAll($arr_insert);
                    $arr_update = [
                        'status' => 2,
                        'release_time' => $this->today,
                        'release_user_id' => session('org_user_id'),
                        'release_user_name' => session('org_user_name')
                    ];
                    Db::table('keywords')->where('kw_id','in',$kw_id_arr_all)->update(['is_deliver'=>1]);
                    // 更新task状态
                    Db::table('task')->where('t_id', 'in', $t_id_arr)->update($arr_update);
                    Db::commit();
                }catch (Exception $e){
                    Db::rollback();
                    error($e);
                    return false;
                }
            }
            return true;
    }

    private function deliverRule($task,$except_kw_id=[]){
        if($task['kw_id']!=''){
            return explode(',',$task['kw_id']);
        }
        // 自动分配
        // 1.双匹配
        $need_num = $task['keyword_num'];
        $kw_ids_auto = Db::table('keywords')
            ->where('is_deliver', '=', 0)
            ->where('kw_id','not in',$except_kw_id)
            ->where('user_id', '=', $task['user_id'])
            ->where('c_id', '=', $task['c_id'])
            ->limit($need_num)
            ->column('kw_id');
        $except_kw_id = array_merge($except_kw_id,$kw_ids_auto);
        // 2.单项匹配
        if (count($kw_ids_auto) < $need_num) {
            $temp = Db::table('keywords')
                ->where('is_deliver', '=', 0)
                ->where('kw_id','not in',$except_kw_id)
                ->where( 'c_id ','=' . $task['c_id'])
                ->limit(($need_num - count($kw_ids_auto)))
                ->column('kw_id');
            $except_kw_id = array_merge($except_kw_id,$temp);
            $kw_ids_auto = array_merge($kw_ids_auto, $temp);
        }
        // 3.无关，只是未分配
        if (count($kw_ids_auto) < $need_num) {
            $temp = Db::table('keywords')
                ->where('is_deliver', '=', 0)
                ->where('kw_id','not in',$except_kw_id)
                ->where('(user_id + c_id) = 0')
                ->where('user_id', '<>', $task['user_id'])
                ->where('c_id', '<>', $task['c_id'])
                ->limit(($need_num - count($kw_ids_auto)))
                ->column('kw_id');
            $kw_ids_auto = array_merge($kw_ids_auto, $temp);
        }
       return $kw_ids_auto;
    }

    /**
     *
     * 3.任务完成统计
     */
    public function count()
    {
        $dp_score =[];
        $score =[];
        $user_arr = Db::table('task_detail td')
            ->join('users u','td.user_id = u.user_id','left')
            ->where('td.status','<>',2)
            ->group('td.user_id')
            ->field('td.user_id,u.dp_id')
            ->select();
        if(!empty($user_arr)){
            foreach ($user_arr as $user){
                $old_score = 0;
                $new_score = 0;
                $old_score_data = Db::table('task_detail')
                    ->where('status','<>',2)
                    ->where('user_id','=',$user['user_id'])
                    ->field('old_rank_pc,old_rank_m,new_rank_pc,new_rank_m,is_archive_pc,is_archive_m')->select();
                foreach ($old_score_data as $v){
                    $pc_old = $this->rankScore($v['old_rank_pc']);
                    $pc_old = $pc_old >0 ?$pc_old+1:0;
                    $m_old= $this->rankScore($v['old_rank_m'],2);
                    $m_old = $m_old >0 ?$m_old+1:0;
                    $old_score += $pc_old + $m_old;

                    $pc_new = $this->rankScore($v['new_rank_pc']);
                    $pc_new = $pc_new >0 || $v['is_archive_pc']>0 ?$pc_new+1:0;
                    $m_new = $this->rankScore($v['new_rank_pc']);
                    $m_new = $m_new >0 || $v['is_archive_m']>0 ?$m_new+1:0;
                    $new_score += $pc_new + $m_new;
                }
                $person_score = $new_score - $old_score;
                $score[$user['user_id']]= [
                    'user_id'=>$user['user_id'],
                    'dp_id'=>$user['dp_id'],
                    'task_time'=>date('Y-m-d'),
                    'old_score'=>$old_score,
                    'new_score'=>$new_score,
                    'person_score'=>$person_score,
                ];
                $dp_score[$user['dp_id']]['score'] = isset($dp_score[$user['dp_id']]['score'])?$dp_score[$user['dp_id']]['score']+$person_score:$person_score;
                $dp_score[$user['dp_id']]['num'] = isset($dp_score[$user['dp_id']]['num'])?$dp_score[$user['dp_id']]['num']+1:1;
                echo var_export($score,1),PHP_EOL;
            }
            foreach ($score as $key=>$value){
                $score[$key]['average_score']=round($dp_score[$value['dp_id']]['score'] / $dp_score[$value['dp_id']]['num']);
            }
            try{
                Db::table('assessment')->insertAll($score);
            }catch (Exception $e){
                error($e);
                Log::error($score);
                return false;
            }
        }
        return true;
    }

    private function rankScore($rank,$ratio=1){
        $rank_score = 0;
        if($rank == 1){
            $rank_score = 30*$ratio;
        }elseif ($rank == 2){
            $rank_score = 25*$ratio;
        }elseif ($rank == 3){
            $rank_score = 20*$ratio;
        }elseif ($rank >3 && $rank <=10){
            $rank_score = 10*$ratio;
        }elseif ($rank >10 && $rank <=20){
            $rank_score = 5*$ratio;
        }
        return $rank_score;
    }


    /**
     * @return mixed
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * @param mixed $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->message = $message;
        return $this;
    }
}