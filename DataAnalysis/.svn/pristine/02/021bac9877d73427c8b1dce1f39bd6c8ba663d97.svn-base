<?php
/**
 * 任务数据处理
 * Created by PhpStorm.
 * User: wdy
 * Date: 2018/3/14
 * Time: 08:50
 */

namespace app\script\model;

use think\Db;
use think\exception\DbException;

class TaskGenerator
{
    protected $yesterday;
    protected $today;
    protected $now;

    public function __construct()
    {
        $this->yesterday = date("Y-m-d 00:00:00", strtotime("-1 day"));
        $this->today = date("Y-m-d 00:00:00", strtotime("0 day"));
        $this->now = date("Y-m-d H:i:s", time());
    }


    /**
     * 1.任务生成:
     * 将昨日已发布、已取消的任务导入今日任务中。
     */
    public function gen()
    {
        // 生成昨天的任务
        try {
            // 昨天已发布的任务
            $tasks_published = Db::table('task')
                ->where('task_time', 'between', [$this->yesterday, $this->today])
                ->where('status', '=', '2')->select();
            // 昨天已取消的任务
            $tasks_canceled = Db::table('task')
                ->where('task_time', 'between', [$this->yesterday, $this->today])
                ->where('status', '=', '0')->select();
            if (!empty($tasks_published)) {
                foreach ($tasks_published as $k => $v) {
                    $tasks_published[$k]['status'] = 1;
                    $tasks_published[$k]['task_time'] = $this->now;
                    unset($tasks_published[$k]['t_id']);
                    $kw_ids = [];
                    if (!empty($v['kw_id'])) {
                        $kw_ids = explode(',', $v['kw_id']);
                    }
                    $tasks_published[$k]['keyword_num'] = count($kw_ids);
                }
            }
            if (!empty($tasks_canceled)) {
                foreach ($tasks_canceled as $k => $v) {
                    $tasks_canceled[$k]['task_time'] = $this->now;
                    unset($tasks_canceled[$k]['t_id']);
                    $kw_ids = [];
                    if (!empty($v['kw_id'])) {
                        $kw_ids = explode(',', $v['kw_id']);
                    }
                    $tasks_canceled[$k]['keyword_num'] = count($kw_ids);
                }
            }
            $task_gen = array_merge($tasks_published, $tasks_canceled);
            // 处理后插入task
            if (!empty($task_gen)) {
                foreach ($task_gen as $k => $v) {
                    Db::table('task')->insert($v);
                }
            }
        } catch (DbException $e) {
        }
        return true;
    }

    /**
     * 2.任务分发
     */
    public function deliver($t_id = 0)
    {
        if ($t_id == 0) {
            // 今日待分发的任务
            $tasks_unpublished = Db::table('task')
                ->where('task_time', 'between', [$this->yesterday, $this->today])
                ->where('status', '=', '1')
                ->where('kw_id != \'\'')
                ->select();
        } else {
            // 指定任务
            $tasks_unpublished = Db::table('task')
                ->where('t_id', '=', $t_id)
                ->select();
        }
        if (!empty($tasks_unpublished)) {
            foreach ($tasks_unpublished as $k => $v) {
                $arr_insert = [
                    'create_time' => $this->today,
                    'user_id' => $v['user_id'],
                    'kw_id' => $v['kw_id'],
                    'status' => 0,
                    't_id' => $v['t_id'],
                    'article_num' => $v['article_num'],
                    'complete_num' => 0,
                ];
                // 处理后插入task_detail
                Db::table('task_detail')->insert($arr_insert);
            }
        }
        return true;
    }

    /**
     *
     * 3.任务完成统计
     */
    public function count()
    {
        // 今日待统计的任务
        $sql = 'SELECT
                    create_time AS task_time,
                    user_id,
                    -- GROUP_CONCAT(kw_id) AS kw_ids,
                    COUNT(kw_id) AS import_num,
                    COUNT(t_id) AS task_import_num,
                    COUNT(CASE WHEN complete_num > 0 THEN 1 ELSE NULL END) AS spread_num,
                    SUM(article_num) AS article_num,
                    SUM(complete_num) AS release_num
                FROM
                  task_detail
                WHERE STATUS = 1
                AND create_time BETWEEN \'' . $this->yesterday . '\' AND \'' . $this->today . '\' GROUP BY user_id';
        $tasks_uncounted = Db::query($sql);
        if (!empty($tasks_uncounted)) {
            foreach ($tasks_uncounted as $k => $v) {
                // 处理后插入task_count
                Db::table('task_count')->insert($v);
            }
        }
        return true;
    }
}