<?php
/**
 * Created by PhpStorm.
 * User: hitoTright
 * Date: 2018/3/8
 * Time: 11:48
 */

namespace app\script\model;

use app\common\Snoopy;
use app\index\controller\Zlog;
use think\Db;
use app\common\Process;
use think\Exception;
use think\Log;
use app\common\Utility;

class ArticleSpiderProcess extends Process
{
    private $article_num = 10;
    private $keyword_num = 10;
    private $link_pool = 500;
    private $kw_id = 0;
    private $url_deny=[
        'javascript',
        '#',
    ];

    public function input()
    {
        echo 'keyword_num:'.$this->keyword_num.';article_num:'.$this->article_num.PHP_EOL;
        $keywords=Db::table('keywords')->where('material_num','<',$this->article_num)
            ->order('add_time','asc')->limit($this->keyword_num)
            ->field('keyword,material_num')->select();
        if(!empty($keywords)){
            foreach ($keywords as $item){
                $this->push($item['keyword'].'|'.($this->article_num - $item['material_num']));
            }
        }else{
            echo 'not find keyword need crawl from keywords table!';
        }
    }

    public function parse($work)
    {
        Zlog::$logfile=ROOT_PATH.'zlog'.DS.'hito.txt';
        list($keyword,$num) = explode('|',$work);
        echo 'crawler:'.$keyword.'|'.$num.PHP_EOL;
        $this->kw_id = Db::table('keywords')->where('keyword','=',$keyword)->value('kw_id');
        $start = 0;
        while($num>0){
            Zlog::write('start:'.$start);
            $url = Db::table('web_material')->order('level','desc')->where('status','=',1)
                ->limit($start.',1')->field('url')->select();
            $start++;
            if($url != null){
                Zlog::write('getCrawlUrl:'.$url[0]['url']);
                $this->getCrawlUrl($num,$url[0]['url'],$keyword);
            }else{
                break;
            }
        }
    }

    private function getCrawlUrl(&$num,$url,$keyword){
        $snoopy = new Snoopy();
        $links = [$url];
        $links_old=[];
        $pu = parse_url($url);
        while($num>0&&count($links)>0){
            if(count($links_old)>=$this->link_pool){
                unset($links_old[key($links)]);
            }
            $current=current($links);
            $html=Utility::httpRequest($current,[],'get',[],5);
            if(!$html){
                $links_old[]=$current;
                unset($links[key($links)]);
                continue;
            }
            Zlog::write('fetch:'.$current);
            $snoopy->results = $html;
            $txt = $snoopy->fetch_text();
            if(strpos($txt,$keyword) !== false && $id=$this->saveMaterial($current,$html)){
                $num--;
            }
            $link = $snoopy->fetch_links($current);
            if(!empty($link)&&is_array($link)){
                foreach ($link as $l){
                    if(strpos($l,$pu['host'])&&!in_array($l,$links) &&$this->urlFilter($l)&&count($links)<$this->link_pool){
                        $links[]=$l;
                    }
                }
            }

            $links_old[]=$current;
            unset($links[key($links)]);
            Zlog::write('links:'.count($links));
        }
    }

    private function urlFilter($url){
        foreach ($this->url_deny as $item){
            if(strpos($url,$item)||count(explode('//',$url))>2){
                return false;
            }
        }
        return true;//通过
    }

    private function curlRequest($url){
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl, CURLOPT_TIMEOUT, 60);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

        $ip = mt_rand(11, 191) . "." . mt_rand(0, 240) . "." . mt_rand(1, 240) . "." . mt_rand(1, 240);
        $agentarry = ['Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'];
        $user_agent = $agentarry[array_rand($agentarry, 1)];  //随机浏览器UA
        $header = array(
            'CLIENT-IP:' . $ip,
            'X-FORWARDED-FOR:' . $ip,
        );    //构造ip
        curl_setopt($curl, CURLOPT_HTTPHEADER, $header); // 请求头
//        curl_setopt($curl, CURLOPT_REFERER, $referurl);  //模拟来源网址
        curl_setopt($curl, CURLOPT_USERAGENT, $user_agent); //模拟常用浏览器的UA

        // 真正执行
        $result = curl_exec($curl);
        if($result === false){
            Log::error(curl_error($curl));
        }
        curl_close($curl);
        return $result;
    }

    private function saveMaterial($url,$html){
            Zlog::write('saveMaterial:'.$url);
            $data['url'] = $url;
            $data['kw_id']=$this->kw_id;
            $data['add_time']=date('Y-m-d H:i:s');
            try{
                $id = Db::table('keywords_material')->insertGetId($data);
                $update = $this->handleHtml($html);
                Db::table('keywords_material')->where('km_id','=',$id)->update($update);
                return true;
            }catch (Exception $e){
                Log::log($e->getMessage().PHP_EOL.$e->getTraceAsString());
                return false;
            }
    }

    private function handleHtml($html){
        $pattern = '/src[=:]\"http:\/\/.*?[(png)(jpg)(jpeg)(gif)(bmp)(GIF)]\"/';
        $i=preg_match_all($pattern, $html, $img);
        if($i&&!empty($img[0])) {
            foreach ($img[0] as $item) {
                $url = substr($item, 5, -1);
                $p = strrpos($url, '.');
                $file=md5($url) . substr($url, $p);
                $dir = ROOT_PATH.'public'.DS.'material_img'.DS.date('Y').DS.date('m').DS.date('d').DS;
                if(!file_exists($dir)){
                    mkdir($dir,0777,true);
                    chmod($dir,0777);
                }
                file_put_contents($dir.$file,file_get_contents($url));
                $html = str_replace($url, $file, $html);
            }
        }
        return $html;
    }

    /**
     * @param int $article_num
     * @return $this
     */
    public function setArticleNum($article_num)
    {
        $this->article_num = $article_num;
        return $this;
    }

    /**
     * @param int $keyword_num
     * @return $this
     */
    public function setKeywordNum($keyword_num)
    {
        $this->keyword_num = $keyword_num;
        return $this;
    }

    /**
     * @param int $link_pool
     * @return $this
     */
    public function setLinkPool($link_pool)
    {
        $this->link_pool = $link_pool;
        return $this;
    }


}